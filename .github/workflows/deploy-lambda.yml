name: Deploy Lambda Function

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Crear deployment package solo con c√≥digo y cassandra-driver
    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package with lightweight ML..."
        cd lambda
        
        # Instalar solo cassandra-driver
        pip install cassandra-driver==3.28.0 -t .
        
        # Limpiar archivos innecesarios
        rm -rf __pycache__ *.pyc
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        
        # Crear ZIP
        zip -r ../lambda-deployment.zip . -q -x "*.git*" "*.pyc" "__pycache__/*" "*.dist-info/*" "tests/*"
        cd ..
        
        echo "‚úÖ Deployment size: $(du -sh lambda-deployment.zip | cut -f1)"
        
        # Verificar que el tama√±o es razonable
        SIZE_MB=$(du -m lambda-deployment.zip | cut -f1)
        if [ $SIZE_MB -gt 50 ]; then
          echo "‚ö†Ô∏è Warning: Package size is ${SIZE_MB}MB"
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    # Verificar si la funci√≥n Lambda existe
    - name: Check if Lambda function exists
      id: check-lambda
      run: |
        if aws lambda get-function --function-name menu-generator 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Lambda function exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "üÜï Lambda function does not exist, will create"
        fi
    
    # Crear funci√≥n si no existe
    - name: Create Lambda function if not exists
      if: steps.check-lambda.outputs.exists == 'false'
      run: |
        echo "üÜï Creating new Lambda function..."
        aws lambda create-function \
          --function-name menu-generator \
          --runtime python3.10 \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
          --handler lambda_function.lambda_handler \
          --zip-file fileb://lambda-deployment.zip \
          --timeout 60 \
          --memory-size 512 \
          --environment "Variables={KEYSPACES_USER=${{ secrets.KEYSPACES_USER }},KEYSPACES_PASSWORD=${{ secrets.KEYSPACES_PASSWORD }}}" \
          --description "Menu generator with lightweight ML model"
        
        echo "‚úÖ Lambda function created successfully"
    
    # Actualizar la funci√≥n si ya existe
    - name: Update Lambda function
      if: steps.check-lambda.outputs.exists == 'true'
      run: |
        echo "üîÑ Updating Lambda function code..."
        
        # Actualizar c√≥digo
        aws lambda update-function-code \
          --function-name menu-generator \
          --zip-file fileb://lambda-deployment.zip \
          --no-cli-pager
        
        echo "‚è≥ Waiting for update to complete..."
        aws lambda wait function-updated \
          --function-name menu-generator
        
        echo "üîß Updating function configuration..."
        # Actualizar configuraci√≥n
        aws lambda update-function-configuration \
          --function-name menu-generator \
          --timeout 60 \
          --memory-size 512 \
          --environment "Variables={KEYSPACES_USER=${{ secrets.KEYSPACES_USER }},KEYSPACES_PASSWORD=${{ secrets.KEYSPACES_PASSWORD }}}" \
          --description "Menu generator with lightweight ML model" \
          --no-cli-pager
        
        echo "‚úÖ Function updated successfully"
    
    # Test Lambda function
    - name: Test Lambda function
      run: |
        echo "üß™ Testing Lambda function..."
        
        # Crear payload en base64
        PAYLOAD=$(echo '{"queryStringParameters": {"action": "test"}}' | base64 -w 0)
        
        # Invocar funci√≥n
        aws lambda invoke \
          --function-name menu-generator \
          --payload "$PAYLOAD" \
          response.json \
          --no-cli-pager
        
        echo "üìã Response:"
        cat response.json | jq '.' 2>/dev/null || cat response.json
        echo ""
        
        # Verificar que la respuesta sea exitosa
        if cat response.json | grep -q '"message":"Lambda function is working!"'; then
          echo "‚úÖ Lambda test passed!"
        else
          echo "‚ùå Lambda test failed"
          echo "Response content:"
          cat response.json
          exit 1
        fi
    
    # Obtener informaci√≥n de la funci√≥n
    - name: Get function info
      if: always()
      run: |
        echo "üìä Function configuration:"
        aws lambda get-function-configuration \
          --function-name menu-generator \
          --query '{Runtime: Runtime, MemorySize: MemorySize, Timeout: Timeout, LastModified: LastModified}' \
          --output table
        
        echo ""
        echo "üîó To invoke this function:"
        echo "aws lambda invoke --function-name menu-generator --payload '{\"path\":\"/menu\",\"httpMethod\":\"POST\",\"body\":\"{\\\"presupuesto\\\":200}\"}' output.json"