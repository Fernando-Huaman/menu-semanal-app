name: Deploy Lambda Function

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Crear Layer para dependencias grandes
    - name: Create ML Dependencies Layer
      run: |
        echo "üì¶ Creating ML dependencies layer..."
        mkdir -p ml-layer/python/lib/python3.10/site-packages
        pip install numpy==1.24.3 scikit-learn==1.3.0 pandas==2.0.3 -t ml-layer/python/lib/python3.10/site-packages/
        cd ml-layer
        zip -r ../ml-dependencies-layer.zip . -q
        cd ..
        echo "‚úÖ Layer size: $(du -sh ml-dependencies-layer.zip | cut -f1)"
    
    # Crear deployment package solo con c√≥digo y cassandra-driver
    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package..."
        cd lambda
        mkdir -p deployment
        
        # Copiar archivos Python
        cp *.py deployment/
        
        # Copiar carpeta data
        cp -r data deployment/
        
        # Instalar solo cassandra-driver
        pip install cassandra-driver==3.28.0 -t deployment/
        
        # Crear ZIP
        cd deployment
        zip -r ../../lambda-deployment.zip . -q
        cd ../..
        echo "‚úÖ Deployment size: $(du -sh lambda-deployment.zip | cut -f1)"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    # Verificar si la funci√≥n Lambda existe
    - name: Check if Lambda function exists
      id: check-lambda
      run: |
        if aws lambda get-function --function-name menu-generator 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    # Crear funci√≥n si no existe
    - name: Create Lambda function if not exists
      if: steps.check-lambda.outputs.exists == 'false'
      run: |
        echo "üÜï Creating new Lambda function..."
        aws lambda create-function \
          --function-name menu-generator \
          --runtime python3.10 \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
          --handler lambda_function.lambda_handler \
          --zip-file fileb://lambda-deployment.zip \
          --timeout 60 \
          --memory-size 512 \
          --environment "Variables={KEYSPACES_USER=${{ secrets.KEYSPACES_USER }},KEYSPACES_PASSWORD=${{ secrets.KEYSPACES_PASSWORD }},AWS_REGION=us-east-1}"
    
    # Publicar el Layer
    - name: Publish Lambda Layer
      id: publish-layer
      run: |
        echo "üì§ Publishing ML dependencies layer..."
        LAYER_VERSION=$(aws lambda publish-layer-version \
          --layer-name menu-ml-dependencies \
          --description "ML dependencies for menu generator" \
          --zip-file fileb://ml-dependencies-layer.zip \
          --compatible-runtimes python3.10 \
          --query 'Version' \
          --output text)
        echo "‚úÖ Published layer version: $LAYER_VERSION"
        echo "layer_version=$LAYER_VERSION" >> $GITHUB_OUTPUT
    
    # Actualizar la funci√≥n
    - name: Update Lambda function
      if: steps.check-lambda.outputs.exists == 'true'
      run: |
        echo "üîÑ Updating Lambda function code..."
        aws lambda update-function-code \
          --function-name menu-generator \
          --zip-file fileb://lambda-deployment.zip \
          --no-cli-pager
        
        echo "‚è≥ Waiting for update to complete..."
        aws lambda wait function-updated \
          --function-name menu-generator
        
        echo "‚úÖ Function code updated"
    
    # Actualizar configuraci√≥n con Layer
    - name: Update function configuration
      run: |
        echo "üîß Updating function configuration with layer..."
        aws lambda update-function-configuration \
          --function-name menu-generator \
          --layers "arn:aws:lambda:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:menu-ml-dependencies:${{ steps.publish-layer.outputs.layer_version }}" \
          --timeout 60 \
          --memory-size 512 \
          --environment "Variables={KEYSPACES_USER=${{ secrets.KEYSPACES_USER }},KEYSPACES_PASSWORD=${{ secrets.KEYSPACES_PASSWORD }},AWS_REGION=us-east-1}" \
          --no-cli-pager
        
        echo "‚úÖ Function configuration updated"
    
    - name: Test Lambda function
      run: |
        echo "üß™ Testing Lambda function..."
        aws lambda invoke \
          --function-name menu-generator \
          --payload '{"queryStringParameters": {"action": "test"}}' \
          response.json \
          --no-cli-pager
        
        echo "üìã Response:"
        cat response.json | jq '.' || cat response.json