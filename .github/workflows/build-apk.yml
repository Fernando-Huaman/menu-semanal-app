name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        npm install
        npm install -g @capacitor/cli
    
    - name: Build React app
      run: |
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.LAMBDA_API_URL }}
    
    - name: Initialize Capacitor Android
      run: |
        # Verificar que capacitor.config.json existe y tiene appId
        if [ ! -f "capacitor.config.json" ]; then
          echo "Creating capacitor.config.json..."
          cat > capacitor.config.json << 'EOF'
        {
          "appId": "com.menuapp.semanal",
          "appName": "Menu Semanal",
          "webDir": "build",
          "bundledWebRuntime": false,
          "server": {
            "androidScheme": "https"
          }
        }
        EOF
        fi
        
        # Agregar Android si no existe
        if [ ! -d "android" ]; then
          npx cap add android
        fi
        
        # Sync con Android
        npx cap sync android
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Create keystore directory
      run: |
        mkdir -p android/app
    
    - name: Decode Keystore
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-keystore.jks
    
    - name: Create gradle.properties
      run: |
        cd android
        cat > gradle.properties << EOF
        # Habilitar AndroidX (requerido)
        android.useAndroidX=true
        android.enableJetifier=true
        
        # Configuración del keystore
        MYAPP_RELEASE_STORE_FILE=release-keystore.jks
        MYAPP_RELEASE_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
        MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
        MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
        
        # Optimizaciones de build
        org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.configureondemand=true
        org.gradle.caching=true
        EOF
    
    - name: Configure signing in build.gradle
      run: |
        cd android/app
        
        # Agregar configuración de firma si no existe
        if ! grep -q "signingConfigs" build.gradle; then
          sed -i '/android {/a \
          signingConfigs {\
              release {\
                  if (project.hasProperty("MYAPP_RELEASE_STORE_FILE")) {\
                      storeFile file(MYAPP_RELEASE_STORE_FILE)\
                      storePassword MYAPP_RELEASE_STORE_PASSWORD\
                      keyAlias MYAPP_RELEASE_KEY_ALIAS\
                      keyPassword MYAPP_RELEASE_KEY_PASSWORD\
                  }\
              }\
          }' build.gradle
          
          sed -i '/buildTypes {/,/release {/s/release {/release {\
              signingConfig signingConfigs.release/' build.gradle
        fi
    
    - name: Build APK
      run: |
        cd android
        chmod +x gradlew
        ./gradlew assembleRelease
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: menu-semanal-ml
        path: android/app/build/outputs/apk/release/app-release.apk
        retention-days: 30